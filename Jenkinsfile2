pipeline {
    agent any
    
   /* tools{
        maven 'maven3'
    }*/

    stages {
        stage('gitcheckout') {
            steps {
                git changelog: false, poll: false, url: 'https://github.com/singhrajrohit/secretsanta-generator.git'
            }
        }
        stage('Compile') {
            steps {
                sh ' mvn clean compile'
            }
        }
        stage('Sonar Code Analysis') {
      environment {
        SONAR_URL = "http://18.177.139.35:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'SonarqubeID' , variable: 'SONAR_AUTH_TOKEN')]) {
          sh ' mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('OWASP Dependency Check') {
            steps {
               dependencyCheck additionalArguments: ' --scan ./ ', odcInstallation: 'DP'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }        
        }
    stage('Build') {
            steps {
                sh ' mvn clean package'
            }
        }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "singhrajrohit/secret-santa:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }
      steps {
        script {
            sh ' docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
    }
 }
    stage('Pull and Deploy'){
        environment {
        DOCKER_IMAGE = "singhrajrohit/secret-santa:${BUILD_NUMBER}"
        CONTAINER_NAME = "secret-santa-app"
        PORT_MAPPING = "2024:8080" // Adjust port mapping as needed
    }
            steps {
                script {
                    // Pull the Docker image
                    sh "docker pull ${DOCKER_IMAGE}"
                    
                    // Stop and remove any existing container with the same name
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"
                    
                    // Run the container
                    sh "docker run -d --name ${CONTAINER_NAME} -p ${PORT_MAPPING} ${DOCKER_IMAGE}"
                    
                    // Optionally, you may want to add additional steps here, such as health checks or testing
                }
            }
        }
    }
}
